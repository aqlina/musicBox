getwd()
Sys.getenv("KUBA")
Sys.getenv("KUPA")
Sys.setenv("KUBA", 3)
Sys.setenv("KUBA=3")
Sys.setenv(KUBA=3)
shiny::runApp('~/Documents/shiny')
getwd()
?as_tibble_row
document("musicBox")
librray(devtools)
library(devtools)
document("musicBox")
getdw()
getwd()
setwd("/home/alina")
document("musicBox")
document("musicBox")
launch_app()
document("musicBox")
?musicBox
document("musicBox")
?musicBox
document("musicBox")
?musicBox
document("musicBox")
document("musicBox")
?musicBox
document("musicBox")
?musicBox
musicians
musicians$id <- 1:10
musicians
musicians <- musicians[, c('id', 'name', 'surname')]
musicians
use_data(musicians, overwrite=TRUE)
getwd()
setwd("/home/alina/musicBox")
use_data(musicians, overwrite=TRUE)
bands
bands$id <- 1:10
bands <- bands[, c('id', 'name')]
bands
use_data(bands, overwrite=TRUE)
events
events$id <- 1:10
events <- events[, c("id", "name", "musician_id", "band_id")]
use_data(events, overwrite=TRUE)
events
bands
events
document("musicBox")
setwd("/home/alina")
document("musicBox")
?musicians
?bands
?events
check("musicBox")
%>%
?%.%
document("musicBox")
document("musicBox")
document("musicBox")
check("musicBox")
document("musicBox")
/str_trim
?str_trim
?str_to_title
document("musicBox")
launch_app()
document("musicBox")
document("musicBox")
document("musicBox")
check("musicBox")
document("musicBox")
document("musicBox")
document("musicBox")
check("musicBox")
document("musicBox")
check("musicBox")
check("musicBox")
?str_split
document("musicBox")
use_mit_license()
document("musicBox")
check("musicBox")
?use_mit_license
version()
find_name
find_name()
library(usethis)
find_name()
?usethis
use_ccby_license(name = "Alina Tselinina")
document("musicBox")
?musicBox
check("musicBox")
?addValuesToDB
document("musicBox")
document("musicBox")
check("musicBox")
?datatable
document("musicBox")
?musicBox
document("musicBox")
?musicBox
document("musicBox")
check("musicBox")
document("musicBox")
document("musicBox")
?addValuesToDB
document("musicBox")
check("musicBox")
document("musicBox")
document("musicBox")
check("musicBox")
document("musicBox")
check("musicBox")
use_testthat('musicBox')
use_testthat()
names(musicians)
expect_equal(dbReadTable(getConnectionToDB(), "musicians"), c("id", "name", "surname"))
library(testthat)
expect_equal(dbReadTable(getConnectionToDB(), "musicians"), c("id", "name", "surname"))
expect_equal(names(dbReadTable(getConnectionToDB(), "musicians")), c("id", "name", "surname"))
expect_equal(names(dbReadTable(getConnectionToDB(), "events")), c("id", "name", "musician_id", "band_id"))
sapply(dbReadTable(getConnectionToDB(), "musicians"), class)
?expect_identical
class(sapply(dbReadTable(getConnectionToDB(), "musicians"), class))
expect_identical(sapply(dbReadTable(getConnectionToDB(), "musicians"), class),
c("id"="integer", "name"="character", "surname"="character"))
expect_identical(sapply(dbReadTable(getConnectionToDB(), "musicians"), class),
c("id"="integer", "name"="character", "surname"="character"))
expect_identical(sapply(dbReadTable(getConnectionToDB(), "bands"), class),
c("id"="integer", "name"="character"))
expect_identical(sapply(dbReadTable(getConnectionToDB(), "events"), class),
c("id"="integer", "name"="character", "musician_id"="character", "band_id"="character"))
tibble?
?tibble
expect_equal(nrow(dbReadTable(getConnectionToDB(), "musicians")),
distinct(nrow(dbReadTable(getConnectionToDB(), "musicians"))))
expect_equal(nrow(dbReadTable(getConnectionToDB(), "musicians")),
nrow(distinct(dbReadTable(getConnectionToDB(), "musicians"))))
getRversion()
expect_equal(nrow(dbReadTable(getConnectionToDB(), "musicians")),
nrow(distinct(dbReadTable(getConnectionToDB(), "musicians"))))
expect_equal(nrow(dbReadTable(getConnectionToDB(), "bands")),
nrow(distinct(dbReadTable(getConnectionToDB(), "bands"))))
expect_equal(nrow(dbReadTable(getConnectionToDB(), "events")),
nrow(distinct(dbReadTable(getConnectionToDB(), "events"))))
is.na(dbReadTable(getConnectionToDB(), "bands")
)
all(is.na(dbReadTable(getConnectionToDB(), "bands")))
?all
all(!is.na(dbReadTable(getConnectionToDB(), "bands")))
expect_equal(all(!is.na(dbReadTable(getConnectionToDB(), "bands"))), TRUE)
expect_equal(all(!is.na(dbReadTable(getConnectionToDB(), "events"))), TRUE)
expect_equal(all(!is.na(dbReadTable(getConnectionToDB(), "musicians"))), TRUE)
inputIsCorrect(list("    ", 1.5, 2))
inputIsCorrect(list("    ", 1.5, 2), data.frame(list("MusicFest", 1, 3)))
inputIsCorrect(list("    ", 1.5, 2), musicians)
musicians
inputIsCorrect(list(name="    ", surname="Smith"),
musicians %>% select(-id))
inputIsCorrect(list(name="John", surname="Lenon"), musicians %>% select(-id))
inputIsCorrect(list(name="John", surname="Lenon"),
musicians %>% select(-id),
message=TRUE)
expect_equal(inputIsCorrect(list(name="John", surname="Lenon"),
musicians %>% select(-id),
message=TRUE), "The values you want to add are already in this table.")
inputIsCorrect(list(name="John", surname=NA),
musicians %>% select(-id),
message=TRUE)
expect_equal(inputIsCorrect(list(name="John", surname=NA),
musicians %>% select(-id),
message=TRUE), "Please fill all the gaps.")
events
inputIsCorrect(list(name="MusicFest", musician_id=1.5, band_id=9),
events %>% select(-id),
message=TRUE)
nputIsCorrect(list(name="MusicFest", musician_id=1.5, band_id=NA),
events %>% select(-id),
message=TRUE)
inputIsCorrect(list(name="MusicFest", musician_id=1.5, band_id=NA),
events %>% select(-id),
message=TRUE)
dbReadTable(getConnectionToDB(), "prepared_events")
sapply(dbReadTable(getConnectionToDB(), "prepared_events"), class)
expect_identical(sapply(dbReadTable(getConnectionToDB(), "prepared_events"), class),
c("event_name"="character", "musician_id"="integer",
"musician_name"="character", "musician_surname"="character",
"band"="character"))
getwd()
document("musicBox")
test("musicBox")
document("musicBox")
test("musicBox")
test("musicBox")
for (table in c("musicians", "bands", "events")) {
expect_equal(nrow(dbReadTable(getConnectionToDB(), table) %>% select(-id)),
nrow(distinct(
dbReadTable(getConnectionToDB(), table) %>% select(-id)
)))
}
test("musicBox")
table = "musicians"
dbReadTable(getConnectionToDB(), table) %>% select(-id)
nrow(dbReadTable(getConnectionToDB(), table) %>% select(-id))
nrow(distinct(
dbReadTable(getConnectionToDB(), table) %>% select(-id)
))
testthat("check the absence of duplicated rows in all main tables", {
for (table in c("musicians", "bands", "events")) {
expect_equal(nrow(dbReadTable(getConnectionToDB(), table) %>% select(-id)),
nrow(distinct(
dbReadTable(getConnectionToDB(), table) %>% select(-id)
)))
}
})
library(testthat)
testthat("check the absence of duplicated rows in all main tables", {
for (table in c("musicians", "bands", "events")) {
expect_equal(nrow(dbReadTable(getConnectionToDB(), table) %>% select(-id)),
nrow(distinct(
dbReadTable(getConnectionToDB(), table) %>% select(-id)
)))
}
})
test("musicianBox")
test("musicBox")
test("musicBox")
test("musicBox")
test("musicBox")
test("musicBox")
test("musicBox")
document("musicBox")
check("musicBox")
as_tibble(liats('name'=1, 'surname'=2))
as_tibble(list('name'=1, 'surname'=2))
document('musicBox')
document('musicBox')
document('musicBox')
document('musicBox')
document('musicBox')
check('musicBox')
check('musicBox')
test("musicBox")
launch_app()
launch_app()
runApp('musicBox/R')
document('musicBox')
document('musicBox')
document('musicBox')
document('musicBox')
document('musicBox')
load_all()
document('musicBox')
document('musicBox')
runApp('musicBox/R')
runApp('musicBox/R')
runApp('musicBox/R')
document("musicBox")
document("musicBox")
document("musicBox")
?install_github
document("musicBox")
document("musicBox")
document("musicBox")
